services:
  postgres:
    image: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    env_file:
      - ../.envs/.env.prod
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'" ]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped

  web:
    build:
      context: ..
      dockerfile: docker_management/backend/prod.Dockerfile
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
      - FLASK_SECRET_KEY=${FLASK_SECRET_KEY}
      - S3_BUCKET=${S3_BUCKET}
      - SYSADMIN_EMAILS=${SYSADMIN_EMAILS}
    env_file:
      - ../.envs/.env.prod
    command: uwsgi --yaml uwsgi-config.yml
    volumes:
      - static_volume:/home/app/web/staticfiles/
    expose:
      - 8000
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  certbot:
    image: certbot/certbot
    env_file:
      - ../.envs/.env.prod
    volumes:
      - /etc/letsencrypt/:/etc/letsencrypt/
      - /var/lib/letsencrypt:/var/lib/letsencrypt
      - acme_challenge:/www/.well-known/acme-challenge/
    command: >
      bash -c "certonly 
      --email ${SYSADMIN_EMAILS} 
      --domain ${PUBLIC_DOMAIN_NAME}
      --webroot --webroot-path=/www
      --agree-tos 
      --no-eff-email 
      --force-renewal"

  nginx:
    build:
      context: ..
      dockerfile: docker_management/nginx/prod.Dockerfile
    env_file:
      - ../.envs/.env.prod
    volumes:
      - static_volume:/www/static/
      - acme_challenge:/www/.well-known/acme-challenge/
      - /etc/letsencrypt/:/cert/
    ports:
      - 80:80
      - 443:443
    depends_on:
      web:
        condition: service_completed_successfully
      certbot:
        condition: service_completed_successfully
    restart: unless-stopped

  rabbitmq:
    build:
      context: ..
      dockerfile: docker_management/rabbitmq/prod.Dockerfile
      args:
        - RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
        - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    env_file:
      - ../.envs/.env.prod
    expose:
      - 50000
      - 50002
    ports:
      - 15672:15672
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped

  celery:
    hostname: beiwe-celery
    build:
      context: ..
      dockerfile: docker_management/celery/prod.Dockerfile
      args:
        - RABBITMQ_PORT=${RABBITMQ_PORT}
        - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
      - FLASK_SECRET_KEY=${FLASK_SECRET_KEY}
      - S3_BUCKET=${S3_BUCKET}
      - SYSADMIN_EMAILS=${SYSADMIN_EMAILS}
    env_file:
      - ../.envs/.env.prod
    ports:
      - 50001:50001
    command: >
      bash -c "/home/ubuntu/.pyenv/versions/beiwe/bin/python ./run_script.py run_custom_ondeploy_script processing && 
      supervisord -c /etc/supervisord.conf && 
      service cron start && 
      tail -f /dev/null"
    depends_on:
      - nginx
      - rabbitmq
    restart: unless-stopped

volumes:
  postgres_data:
  static_volume:
  acme_challenge:
