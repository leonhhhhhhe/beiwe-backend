# Generated by Django 4.2.19 on 2025-03-20 13:37

import django.db.models.deletion
from django.db import migrations, models

from constants.user_constants import IOS_API


THOSE_FIELDS = ("participant_id", "app_version_code", "app_version_name", "os_version",)
def build_version_lookup_dict(apps):
    Participant = apps.get_model('database', 'Participant')
    AppVersionHistory = apps.get_model('database', 'AppVersionHistory')
    
    version_map = {pk: [] for pk in Participant.objects.values_list("pk", flat=True)}
    
    # can't use make_lookup_dict because its not the real model, phooey.
    # Have to convert "missing" to None - this is not the right time to rethink this.
    for pk, code, name, version in AppVersionHistory.objects.values_list(*THOSE_FIELDS):
        code = None if code == "missing" else code
        name = None if name == "missing" else name
        version = None if version == "missing" else version
        version_map[pk].append((code, name, version, ))
    return version_map


def shift_particicpant_versions_forward(apps, schema_editor):
    Participant = apps.get_model('database', 'Participant')
    AppVersionHistory = apps.get_model('database', 'AppVersionHistory')
    
    version_map = build_version_lookup_dict(apps)
    
    # version history did not contain the current version of the participant, it contained the
    # history one step back.  We are changing that and shifting it forward one step, code in
    # authentication has been updated accordingly.
    
    new_version_histories = []
    for participant in Participant.objects.all():
        version_code = participant.last_version_code
        version_name = participant.last_version_name
        os_version = participant.last_os_version
        
        version_code = version_code[:16] if version_code else None
        version_name = version_name[:16] if version_name else None
        os_version = os_version[:16] if os_version else None
        
        # never-registered participants
        if version_code is None and version_name is None and os_version is None:
            continue
        
        # no history or no matching history
        if (version_code, version_name, os_version) not in version_map[participant.pk]:
            # details copied exactly from then-current entry creation
            new_version_histories.append(
                AppVersionHistory(
                    participant=participant,
                    app_version_code=version_code or "missing",
                    app_version_name=version_name or "missing",
                    os_version=os_version or "missing",
                    os_is_ios=participant.os_type == IOS_API,
                )
            )
    
    AppVersionHistory.objects.bulk_create(new_version_histories)


class Migration(migrations.Migration):
    
    dependencies = [
        ('database', '0136_scheduledevent_no_resend'),
    ]
    
    operations = [
        migrations.CreateModel(
            name='S3File',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('path', models.TextField(unique=True)),
                ('sha1', models.BinaryField(blank=True, max_length=20, null=True)),
                ('size_uncompressed', models.PositiveBigIntegerField(blank=True, null=True)),
                ('size_compressed', models.PositiveBigIntegerField(blank=True, null=True)),
                ('compression_time_ns', models.PositiveBigIntegerField(blank=True, null=True)),
                ('decompression_time_ns', models.PositiveBigIntegerField(blank=True, null=True)),
                ('encryption_time_ns', models.PositiveBigIntegerField(blank=True, null=True)),
                ('download_time_ns', models.PositiveBigIntegerField(blank=True, null=True)),
                ('upload_time_ns', models.PositiveBigIntegerField(blank=True, null=True)),
                ('decrypt_time_ns', models.PositiveBigIntegerField(blank=True, null=True)),
                ('participant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='s3_files', to='database.participant')),
                ('study', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='s3_files', to='database.study')),
            ],
            options={
                'abstract': False,
            },
        ),
        
        migrations.RunPython(shift_particicpant_versions_forward, reverse_code=migrations.RunPython.noop),
    ]
