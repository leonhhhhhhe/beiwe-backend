# Generated by Django 4.2.15 on 2024-09-25 21:50

from django.db import migrations, models
from django.db.migrations.state import StateApps
from django.utils import timezone


def insert_operating_system_version(apps: StateApps, schema_editor):
    """
    - We do not want to source this data point from the participant, they can change os.
    - IOS did not have app version code until 2.4.13.
    - Android has had both fields forever.
    - If either field is missing it gets filled as "missing"
    - Android's app version code is a monotonic integer.
    - IOS' app version code is a Semantic version string of the forms 2.x, 2.x.y, or 2.x.yz
    - Android's app version name is a Semantic version string of the form x.y.z. or x.y.z-likeRC1
    - IOS' app version Name is "missing" (OLD), a commit hash (old), or a year.build_count like 2024.21
    """
    
    participant_pk: int
    app_version_code: str
    app_version_name: str
    os_version: str
    
    # Fortunately there are only tens of thousands of these on our largest database, and we should
    # have the largest one in the world so pulling this into python is fine.
    AppVersionHistory = apps.get_model('database', 'AppVersionHistory')
    now = timezone.now()
    # keys: participant, app_version_code, app_version_name, os_version
    # new: os_is_ios
    
    query =  AppVersionHistory.objects.values_list(
        "participant_id", "app_version_code", "app_version_name", "os_version"
    )
    
    ios = []
    android = []
    
    for participant_pk, app_version_code, app_version_name, os_version in query:
        # Invalid state, shouldn't exist, just skip
        if app_version_code is None or app_version_name is None or os_version is None:
            continue
        
        # Android ALWAYS has an app code, and it is ALWAYS just digits.
        # IOS can be "missing", or a weird commit-hash (but never all digits), or a number with a
        # dot (.) that will never pass isdigit.
        if app_version_code.isdigit():
            android.append(participant_pk)
        else:
            ios.append(participant_pk)
    
    # update the database
    AppVersionHistory.objects.filter(pk__in=ios).update(os_is_ios=True, last_updated=now)
    AppVersionHistory.objects.filter(pk__in=android).update(os_is_ios=False, last_updated=now)


class Migration(migrations.Migration):
    
    dependencies = [
        ('database', '0129_remove_scheduledevent_checkin_time_and_more'),
    ]
    
    operations = [
        migrations.AddField(
            model_name='appversionhistory',
            name='os_is_ios',
            field=models.BooleanField(null=True),
        ),
        migrations.RunPython(insert_operating_system_version, reverse_code=migrations.RunPython.noop),
    ]
